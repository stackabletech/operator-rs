---
source: crates/stackable-versioned-macros/src/lib.rs
expression: formatted
input_file: crates/stackable-versioned-macros/tests/inputs/k8s/pass/module_preserve.rs
---
#[automatically_derived]
pub(crate) mod versioned {
    pub mod v1alpha1 {
        use super::*;
        pub struct Baz {
            pub boom: Option<u16>,
        }
        #[derive(
            Clone,
            Debug,
            serde::Deserialize,
            serde::Serialize,
            schemars::JsonSchema,
            kube::CustomResource,
        )]
        #[kube(
            group = "foo.example.org",
            version = "v1alpha1",
            kind = "Foo",
            plural = "foos",
            namespaced
        )]
        pub struct FooSpec {
            pub bar: usize,
            pub foo: String,
        }
        #[derive(
            Clone,
            Debug,
            serde::Deserialize,
            serde::Serialize,
            schemars::JsonSchema,
            kube::CustomResource,
        )]
        #[kube(
            group = "bar.example.org",
            version = "v1alpha1",
            kind = "Bar",
            plural = "bars"
        )]
        pub struct BarSpec {
            pub baz: String,
        }
        pub enum Boom {
            Big,
            Shaq,
        }
    }
    impl ::std::convert::From<v1alpha1::Baz> for v1::Baz {
        fn from(__sv_baz: v1alpha1::Baz) -> Self {
            Self { boom: __sv_baz.boom.into() }
        }
    }
    impl ::std::convert::From<v1::Baz> for v1alpha1::Baz {
        fn from(__sv_baz: v1::Baz) -> Self {
            Self { boom: __sv_baz.boom.into() }
        }
    }
    impl ::std::convert::From<v1alpha1::FooSpec> for v1::FooSpec {
        fn from(__sv_foospec: v1alpha1::FooSpec) -> Self {
            Self {
                bar: __sv_foospec.bar.into(),
                baz: ::std::default::Default::default(),
                foo: __sv_foospec.foo.into(),
            }
        }
    }
    impl ::std::convert::From<v1::FooSpec> for v1alpha1::FooSpec {
        fn from(__sv_foospec: v1::FooSpec) -> Self {
            Self {
                bar: __sv_foospec.bar.into(),
                foo: __sv_foospec.foo.into(),
            }
        }
    }
    impl ::std::convert::From<v1alpha1::BarSpec> for v1::BarSpec {
        fn from(__sv_barspec: v1alpha1::BarSpec) -> Self {
            Self {
                baz: __sv_barspec.baz.into(),
            }
        }
    }
    impl ::std::convert::From<v1::BarSpec> for v1alpha1::BarSpec {
        fn from(__sv_barspec: v1::BarSpec) -> Self {
            Self {
                baz: __sv_barspec.baz.into(),
            }
        }
    }
    impl ::std::convert::From<v1alpha1::Boom> for v1::Boom {
        fn from(__sv_boom: v1alpha1::Boom) -> Self {
            match __sv_boom {
                v1alpha1::Boom::Big => v1::Boom::Big,
                v1alpha1::Boom::Shaq => v1::Boom::Shaq,
            }
        }
    }
    impl ::std::convert::From<v1::Boom> for v1alpha1::Boom {
        fn from(__sv_boom: v1::Boom) -> Self {
            match __sv_boom {
                v1::Boom::Big => v1alpha1::Boom::Big,
                v1::Boom::Shaq => v1alpha1::Boom::Shaq,
            }
        }
    }
    pub mod v1 {
        use super::*;
        pub struct Baz {
            pub boom: Option<u16>,
        }
        #[derive(
            Clone,
            Debug,
            serde::Deserialize,
            serde::Serialize,
            schemars::JsonSchema,
            kube::CustomResource,
        )]
        #[kube(
            group = "foo.example.org",
            version = "v1",
            kind = "Foo",
            plural = "foos",
            namespaced
        )]
        pub struct FooSpec {
            pub bar: usize,
            pub baz: bool,
            pub foo: String,
        }
        #[derive(
            Clone,
            Debug,
            serde::Deserialize,
            serde::Serialize,
            schemars::JsonSchema,
            kube::CustomResource,
        )]
        #[kube(group = "bar.example.org", version = "v1", kind = "Bar", plural = "bars")]
        pub struct BarSpec {
            pub baz: String,
        }
        pub enum Boom {
            Big,
            Shaq,
        }
    }
    impl ::std::convert::From<v1::Baz> for v2alpha1::Baz {
        fn from(__sv_baz: v1::Baz) -> Self {
            Self { boom: __sv_baz.boom.into() }
        }
    }
    impl ::std::convert::From<v2alpha1::Baz> for v1::Baz {
        fn from(__sv_baz: v2alpha1::Baz) -> Self {
            Self { boom: __sv_baz.boom.into() }
        }
    }
    #[allow(deprecated)]
    impl ::std::convert::From<v1::FooSpec> for v2alpha1::FooSpec {
        fn from(__sv_foospec: v1::FooSpec) -> Self {
            Self {
                bar: __sv_foospec.bar.into(),
                baz: __sv_foospec.baz.into(),
                deprecated_foo: __sv_foospec.foo.into(),
            }
        }
    }
    #[allow(deprecated)]
    impl ::std::convert::From<v2alpha1::FooSpec> for v1::FooSpec {
        fn from(__sv_foospec: v2alpha1::FooSpec) -> Self {
            Self {
                bar: __sv_foospec.bar.into(),
                baz: __sv_foospec.baz.into(),
                foo: __sv_foospec.deprecated_foo.into(),
            }
        }
    }
    impl ::std::convert::From<v1::BarSpec> for v2alpha1::BarSpec {
        fn from(__sv_barspec: v1::BarSpec) -> Self {
            Self {
                baz: __sv_barspec.baz.into(),
            }
        }
    }
    impl ::std::convert::From<v2alpha1::BarSpec> for v1::BarSpec {
        fn from(__sv_barspec: v2alpha1::BarSpec) -> Self {
            Self {
                baz: __sv_barspec.baz.into(),
            }
        }
    }
    impl ::std::convert::From<v1::Boom> for v2alpha1::Boom {
        fn from(__sv_boom: v1::Boom) -> Self {
            match __sv_boom {
                v1::Boom::Big => v2alpha1::Boom::Big,
                v1::Boom::Shaq => v2alpha1::Boom::Shaq,
            }
        }
    }
    impl ::std::convert::From<v2alpha1::Boom> for v1::Boom {
        fn from(__sv_boom: v2alpha1::Boom) -> Self {
            match __sv_boom {
                v2alpha1::Boom::Big => v1::Boom::Big,
                v2alpha1::Boom::Shaq => v1::Boom::Shaq,
            }
        }
    }
    pub mod v2alpha1 {
        use super::*;
        pub struct Baz {
            pub boom: Option<u16>,
        }
        #[derive(
            Clone,
            Debug,
            serde::Deserialize,
            serde::Serialize,
            schemars::JsonSchema,
            kube::CustomResource,
        )]
        #[kube(
            group = "foo.example.org",
            version = "v2alpha1",
            kind = "Foo",
            plural = "foos",
            namespaced
        )]
        pub struct FooSpec {
            pub bar: usize,
            pub baz: bool,
            #[deprecated]
            pub deprecated_foo: String,
        }
        #[derive(
            Clone,
            Debug,
            serde::Deserialize,
            serde::Serialize,
            schemars::JsonSchema,
            kube::CustomResource,
        )]
        #[kube(
            group = "bar.example.org",
            version = "v2alpha1",
            kind = "Bar",
            plural = "bars"
        )]
        pub struct BarSpec {
            pub baz: String,
        }
        pub enum Boom {
            Big,
            Shaq,
        }
    }
    pub enum Foo {
        V1Alpha1(v1alpha1::Foo),
        V1(v1::Foo),
        V2Alpha1(v2alpha1::Foo),
    }
    impl Foo {
        /// Generates a merged CRD containing all versions and marking `stored_apiversion` as stored.
        pub fn merged_crd(
            stored_apiversion: FooVersion,
        ) -> ::std::result::Result<
            ::k8s_openapi::apiextensions_apiserver::pkg::apis::apiextensions::v1::CustomResourceDefinition,
            ::kube::core::crd::MergeError,
        > {
            ::kube::core::crd::merge_crds(
                vec![
                    < v1alpha1::Foo as ::kube::core::CustomResourceExt > ::crd(), <
                    v1::Foo as ::kube::core::CustomResourceExt > ::crd(), < v2alpha1::Foo
                    as ::kube::core::CustomResourceExt > ::crd()
                ],
                stored_apiversion.as_str(),
            )
        }
        ///Tries to convert a list of objects of kind [`Foo`] to the desired API version
        ///specified in the [`ConversionReview`][cr].
        ///
        ///The returned [`ConversionReview`][cr] either indicates a success or a failure, which
        ///is handed back to the Kubernetes API server.
        ///
        ///[cr]: ::kube::core::conversion::ConversionReview
        pub fn try_convert(
            review: ::kube::core::conversion::ConversionReview,
        ) -> ::kube::core::conversion::ConversionReview {
            let request = match ::kube::core::conversion::ConversionRequest::from_review(
                review,
            ) {
                ::std::result::Result::Ok(request) => request,
                ::std::result::Result::Err(err) => {
                    return ::kube::core::conversion::ConversionResponse::invalid(::kube::client::Status {
                            status: Some(::kube::core::response::StatusSummary::Failure),
                            message: err.to_string(),
                            reason: err.to_string(),
                            details: None,
                            code: 400,
                        })
                        .into_review();
                }
            };
            let desired_api_version = request.desired_api_version.as_str();
            let response = match Self::convert_objects(
                request.objects,
                desired_api_version,
            ) {
                ::std::result::Result::Ok(converted_objects) => {
                    ::kube::core::conversion::ConversionResponse {
                        result: ::kube::client::Status::success(),
                        types: request.types,
                        uid: request.uid,
                        converted_objects,
                    }
                }
                ::std::result::Result::Err(err) => {
                    let code = err.http_status_code();
                    let message = err.join_errors();
                    ::kube::core::conversion::ConversionResponse {
                        result: ::kube::client::Status {
                            status: Some(::kube::core::response::StatusSummary::Failure),
                            message: message.clone(),
                            reason: message,
                            details: None,
                            code,
                        },
                        types: request.types,
                        uid: request.uid,
                        converted_objects: vec![],
                    }
                }
            };
            response.into_review()
        }
        fn convert_objects(
            objects: ::std::vec::Vec<::serde_json::Value>,
            desired_api_version: &str,
        ) -> ::std::result::Result<
            ::std::vec::Vec<::serde_json::Value>,
            ::stackable_versioned::ConvertObjectError,
        > {
            let mut converted_objects = ::std::vec::Vec::with_capacity(objects.len());
            for object in objects {
                let current_object = Self::from_json_value(object.clone())
                    .map_err(|source| ::stackable_versioned::ConvertObjectError::Parse {
                        source,
                    })?;
                match (current_object, desired_api_version) {
                    (Self::V1Alpha1(__sv_foo), "foo.example.org/v1") => {
                        let converted: v1::FooSpec = __sv_foo.spec.into();
                        let desired_object = Self::V1(v1::Foo {
                            metadata: __sv_foo.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1Alpha1(__sv_foo), "foo.example.org/v2alpha1") => {
                        let converted: v1::FooSpec = __sv_foo.spec.into();
                        let converted: v2alpha1::FooSpec = converted.into();
                        let desired_object = Self::V2Alpha1(v2alpha1::Foo {
                            metadata: __sv_foo.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1(__sv_foo), "foo.example.org/v1alpha1") => {
                        let converted: v1alpha1::FooSpec = __sv_foo.spec.into();
                        let desired_object = Self::V1Alpha1(v1alpha1::Foo {
                            metadata: __sv_foo.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1(__sv_foo), "foo.example.org/v2alpha1") => {
                        let converted: v2alpha1::FooSpec = __sv_foo.spec.into();
                        let desired_object = Self::V2Alpha1(v2alpha1::Foo {
                            metadata: __sv_foo.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V2Alpha1(__sv_foo), "foo.example.org/v1alpha1") => {
                        let converted: v1::FooSpec = __sv_foo.spec.into();
                        let converted: v1alpha1::FooSpec = converted.into();
                        let desired_object = Self::V1Alpha1(v1alpha1::Foo {
                            metadata: __sv_foo.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V2Alpha1(__sv_foo), "foo.example.org/v1") => {
                        let converted: v1::FooSpec = __sv_foo.spec.into();
                        let desired_object = Self::V1(v1::Foo {
                            metadata: __sv_foo.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1Alpha1(_), "foo.example.org/v1alpha1") => {
                        converted_objects.push(object)
                    }
                    (Self::V1(_), "foo.example.org/v1") => converted_objects.push(object),
                    (Self::V2Alpha1(_), "foo.example.org/v2alpha1") => {
                        converted_objects.push(object)
                    }
                    (_, unknown_desired_api_version) => {
                        return ::std::result::Result::Err(::stackable_versioned::ConvertObjectError::DesiredApiVersionUnknown {
                            unknown_desired_api_version: unknown_desired_api_version
                                .to_string(),
                        });
                    }
                }
            }
            ::std::result::Result::Ok(converted_objects)
        }
        fn from_json_value(
            object: ::serde_json::Value,
        ) -> ::std::result::Result<Self, ::stackable_versioned::ParseObjectError> {
            let object_kind = object
                .get("kind")
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldMissing {
                    field: "kind".to_string(),
                })?
                .as_str()
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldNotStr {
                    field: "kind".to_string(),
                })?;
            if object_kind != stringify!(Foo) {
                return Err(::stackable_versioned::ParseObjectError::UnexpectedObjectKind {
                    kind: object_kind.to_string(),
                    supported_kind: stringify!(Foo).to_string(),
                });
            }
            let api_version = object
                .get("apiVersion")
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldMissing {
                    field: "apiVersion".to_string(),
                })?
                .as_str()
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldNotStr {
                    field: "apiVersion".to_string(),
                })?;
            let object = match api_version {
                "foo.example.org/v1alpha1" => {
                    let object = ::serde_json::from_value(object)
                        .map_err(|source| ::stackable_versioned::ParseObjectError::Deserialize {
                            source,
                        })?;
                    Self::V1Alpha1(object)
                }
                "foo.example.org/v1" => {
                    let object = ::serde_json::from_value(object)
                        .map_err(|source| ::stackable_versioned::ParseObjectError::Deserialize {
                            source,
                        })?;
                    Self::V1(object)
                }
                "foo.example.org/v2alpha1" => {
                    let object = ::serde_json::from_value(object)
                        .map_err(|source| ::stackable_versioned::ParseObjectError::Deserialize {
                            source,
                        })?;
                    Self::V2Alpha1(object)
                }
                unknown_api_version => {
                    return ::std::result::Result::Err(::stackable_versioned::ParseObjectError::UnknownApiVersion {
                        api_version: unknown_api_version.to_owned(),
                    });
                }
            };
            ::std::result::Result::Ok(object)
        }
        fn into_json_value(
            self,
        ) -> ::std::result::Result<::serde_json::Value, ::serde_json::Error> {
            match self {
                Self::V1Alpha1(__sv_foo) => Ok(::serde_json::to_value(__sv_foo)?),
                Self::V1(__sv_foo) => Ok(::serde_json::to_value(__sv_foo)?),
                Self::V2Alpha1(__sv_foo) => Ok(::serde_json::to_value(__sv_foo)?),
            }
        }
    }
    pub enum FooVersion {
        V1Alpha1,
        V1,
        V2Alpha1,
    }
    impl ::std::fmt::Display for FooVersion {
        fn fmt(
            &self,
            f: &mut ::std::fmt::Formatter<'_>,
        ) -> ::std::result::Result<(), ::std::fmt::Error> {
            f.write_str(self.as_str())
        }
    }
    impl FooVersion {
        pub fn as_str(&self) -> &str {
            match self {
                V1Alpha1 => "v1alpha1",
                V1 => "v1",
                V2Alpha1 => "v2alpha1",
            }
        }
    }
    pub enum Bar {
        V1Alpha1(v1alpha1::Bar),
        V1(v1::Bar),
        V2Alpha1(v2alpha1::Bar),
    }
    impl Bar {
        /// Generates a merged CRD containing all versions and marking `stored_apiversion` as stored.
        pub fn merged_crd(
            stored_apiversion: BarVersion,
        ) -> ::std::result::Result<
            ::k8s_openapi::apiextensions_apiserver::pkg::apis::apiextensions::v1::CustomResourceDefinition,
            ::kube::core::crd::MergeError,
        > {
            ::kube::core::crd::merge_crds(
                vec![
                    < v1alpha1::Bar as ::kube::core::CustomResourceExt > ::crd(), <
                    v1::Bar as ::kube::core::CustomResourceExt > ::crd(), < v2alpha1::Bar
                    as ::kube::core::CustomResourceExt > ::crd()
                ],
                stored_apiversion.as_str(),
            )
        }
        ///Tries to convert a list of objects of kind [`Bar`] to the desired API version
        ///specified in the [`ConversionReview`][cr].
        ///
        ///The returned [`ConversionReview`][cr] either indicates a success or a failure, which
        ///is handed back to the Kubernetes API server.
        ///
        ///[cr]: ::kube::core::conversion::ConversionReview
        pub fn try_convert(
            review: ::kube::core::conversion::ConversionReview,
        ) -> ::kube::core::conversion::ConversionReview {
            let request = match ::kube::core::conversion::ConversionRequest::from_review(
                review,
            ) {
                ::std::result::Result::Ok(request) => request,
                ::std::result::Result::Err(err) => {
                    return ::kube::core::conversion::ConversionResponse::invalid(::kube::client::Status {
                            status: Some(::kube::core::response::StatusSummary::Failure),
                            message: err.to_string(),
                            reason: err.to_string(),
                            details: None,
                            code: 400,
                        })
                        .into_review();
                }
            };
            let desired_api_version = request.desired_api_version.as_str();
            let response = match Self::convert_objects(
                request.objects,
                desired_api_version,
            ) {
                ::std::result::Result::Ok(converted_objects) => {
                    ::kube::core::conversion::ConversionResponse {
                        result: ::kube::client::Status::success(),
                        types: request.types,
                        uid: request.uid,
                        converted_objects,
                    }
                }
                ::std::result::Result::Err(err) => {
                    let code = err.http_status_code();
                    let message = err.join_errors();
                    ::kube::core::conversion::ConversionResponse {
                        result: ::kube::client::Status {
                            status: Some(::kube::core::response::StatusSummary::Failure),
                            message: message.clone(),
                            reason: message,
                            details: None,
                            code,
                        },
                        types: request.types,
                        uid: request.uid,
                        converted_objects: vec![],
                    }
                }
            };
            response.into_review()
        }
        fn convert_objects(
            objects: ::std::vec::Vec<::serde_json::Value>,
            desired_api_version: &str,
        ) -> ::std::result::Result<
            ::std::vec::Vec<::serde_json::Value>,
            ::stackable_versioned::ConvertObjectError,
        > {
            let mut converted_objects = ::std::vec::Vec::with_capacity(objects.len());
            for object in objects {
                let current_object = Self::from_json_value(object.clone())
                    .map_err(|source| ::stackable_versioned::ConvertObjectError::Parse {
                        source,
                    })?;
                match (current_object, desired_api_version) {
                    (Self::V1Alpha1(__sv_bar), "bar.example.org/v1") => {
                        let converted: v1::BarSpec = __sv_bar.spec.into();
                        let desired_object = Self::V1(v1::Bar {
                            metadata: __sv_bar.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1Alpha1(__sv_bar), "bar.example.org/v2alpha1") => {
                        let converted: v1::BarSpec = __sv_bar.spec.into();
                        let converted: v2alpha1::BarSpec = converted.into();
                        let desired_object = Self::V2Alpha1(v2alpha1::Bar {
                            metadata: __sv_bar.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1(__sv_bar), "bar.example.org/v1alpha1") => {
                        let converted: v1alpha1::BarSpec = __sv_bar.spec.into();
                        let desired_object = Self::V1Alpha1(v1alpha1::Bar {
                            metadata: __sv_bar.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1(__sv_bar), "bar.example.org/v2alpha1") => {
                        let converted: v2alpha1::BarSpec = __sv_bar.spec.into();
                        let desired_object = Self::V2Alpha1(v2alpha1::Bar {
                            metadata: __sv_bar.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V2Alpha1(__sv_bar), "bar.example.org/v1alpha1") => {
                        let converted: v1::BarSpec = __sv_bar.spec.into();
                        let converted: v1alpha1::BarSpec = converted.into();
                        let desired_object = Self::V1Alpha1(v1alpha1::Bar {
                            metadata: __sv_bar.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V2Alpha1(__sv_bar), "bar.example.org/v1") => {
                        let converted: v1::BarSpec = __sv_bar.spec.into();
                        let desired_object = Self::V1(v1::Bar {
                            metadata: __sv_bar.metadata,
                            spec: converted,
                        });
                        let desired_object = desired_object
                            .into_json_value()
                            .map_err(|source| ::stackable_versioned::ConvertObjectError::Serialize {
                                source,
                            })?;
                        converted_objects.push(desired_object);
                    }
                    (Self::V1Alpha1(_), "bar.example.org/v1alpha1") => {
                        converted_objects.push(object)
                    }
                    (Self::V1(_), "bar.example.org/v1") => converted_objects.push(object),
                    (Self::V2Alpha1(_), "bar.example.org/v2alpha1") => {
                        converted_objects.push(object)
                    }
                    (_, unknown_desired_api_version) => {
                        return ::std::result::Result::Err(::stackable_versioned::ConvertObjectError::DesiredApiVersionUnknown {
                            unknown_desired_api_version: unknown_desired_api_version
                                .to_string(),
                        });
                    }
                }
            }
            ::std::result::Result::Ok(converted_objects)
        }
        fn from_json_value(
            object: ::serde_json::Value,
        ) -> ::std::result::Result<Self, ::stackable_versioned::ParseObjectError> {
            let object_kind = object
                .get("kind")
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldMissing {
                    field: "kind".to_string(),
                })?
                .as_str()
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldNotStr {
                    field: "kind".to_string(),
                })?;
            if object_kind != stringify!(Bar) {
                return Err(::stackable_versioned::ParseObjectError::UnexpectedObjectKind {
                    kind: object_kind.to_string(),
                    supported_kind: stringify!(Bar).to_string(),
                });
            }
            let api_version = object
                .get("apiVersion")
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldMissing {
                    field: "apiVersion".to_string(),
                })?
                .as_str()
                .ok_or_else(|| ::stackable_versioned::ParseObjectError::FieldNotStr {
                    field: "apiVersion".to_string(),
                })?;
            let object = match api_version {
                "bar.example.org/v1alpha1" => {
                    let object = ::serde_json::from_value(object)
                        .map_err(|source| ::stackable_versioned::ParseObjectError::Deserialize {
                            source,
                        })?;
                    Self::V1Alpha1(object)
                }
                "bar.example.org/v1" => {
                    let object = ::serde_json::from_value(object)
                        .map_err(|source| ::stackable_versioned::ParseObjectError::Deserialize {
                            source,
                        })?;
                    Self::V1(object)
                }
                "bar.example.org/v2alpha1" => {
                    let object = ::serde_json::from_value(object)
                        .map_err(|source| ::stackable_versioned::ParseObjectError::Deserialize {
                            source,
                        })?;
                    Self::V2Alpha1(object)
                }
                unknown_api_version => {
                    return ::std::result::Result::Err(::stackable_versioned::ParseObjectError::UnknownApiVersion {
                        api_version: unknown_api_version.to_owned(),
                    });
                }
            };
            ::std::result::Result::Ok(object)
        }
        fn into_json_value(
            self,
        ) -> ::std::result::Result<::serde_json::Value, ::serde_json::Error> {
            match self {
                Self::V1Alpha1(__sv_bar) => Ok(::serde_json::to_value(__sv_bar)?),
                Self::V1(__sv_bar) => Ok(::serde_json::to_value(__sv_bar)?),
                Self::V2Alpha1(__sv_bar) => Ok(::serde_json::to_value(__sv_bar)?),
            }
        }
    }
    pub enum BarVersion {
        V1Alpha1,
        V1,
        V2Alpha1,
    }
    impl ::std::fmt::Display for BarVersion {
        fn fmt(
            &self,
            f: &mut ::std::fmt::Formatter<'_>,
        ) -> ::std::result::Result<(), ::std::fmt::Error> {
            f.write_str(self.as_str())
        }
    }
    impl BarVersion {
        pub fn as_str(&self) -> &str {
            match self {
                V1Alpha1 => "v1alpha1",
                V1 => "v1",
                V2Alpha1 => "v2alpha1",
            }
        }
    }
}

---
source: crates/stackable-versioned-macros/src/lib.rs
expression: formatted
input_file: crates/stackable-versioned-macros/fixtures/inputs/default/deprecate_struct.rs
---
#[automatically_derived]
mod v1alpha1 {
    use super::*;
    pub struct Foo {
        pub bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
impl ::std::convert::From<v1alpha1::Foo> for v1beta1::Foo {
    fn from(__sv_foo: v1alpha1::Foo) -> Self {
        Self {
            bar: __sv_foo.bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
mod v1beta1 {
    use super::*;
    pub struct Foo {
        pub bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v1beta1::Foo> for v1::Foo {
    fn from(__sv_foo: v1beta1::Foo) -> Self {
        Self {
            deprecated_bar: __sv_foo.bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
mod v1 {
    use super::*;
    pub struct Foo {
        #[deprecated = "gone"]
        pub deprecated_bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v1::Foo> for v2::Foo {
    fn from(__sv_foo: v1::Foo) -> Self {
        Self {
            deprecated_bar: __sv_foo.deprecated_bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
mod v2 {
    use super::*;
    pub struct Foo {
        #[deprecated]
        pub deprecated_bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v2::Foo> for v3::Foo {
    fn from(__sv_foo: v2::Foo) -> Self {
        Self {
            deprecated_bar: __sv_foo.deprecated_bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
mod v3 {
    use super::*;
    pub struct Foo {
        #[deprecated]
        pub deprecated_bar: usize,
        pub baz: bool,
    }
}

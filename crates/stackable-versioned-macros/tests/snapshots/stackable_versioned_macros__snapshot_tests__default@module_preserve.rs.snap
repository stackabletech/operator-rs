---
source: crates/stackable-versioned-macros/src/lib.rs
expression: formatted
input_file: crates/stackable-versioned-macros/tests/inputs/default/pass/module_preserve.rs
---
#[automatically_derived]
pub(crate) mod versioned {
    pub mod v1alpha1 {
        use super::*;
        pub struct Foo {
            pub bar: usize,
            pub foo: String,
        }
        pub struct Bar {
            pub baz: String,
        }
    }
    impl ::std::convert::From<v1alpha1::Foo> for v1::Foo {
        fn from(__sv_foo: v1alpha1::Foo) -> Self {
            Self {
                bar: __sv_foo.bar.into(),
                baz: ::std::default::Default::default(),
                foo: __sv_foo.foo.into(),
            }
        }
    }
    impl ::std::convert::From<v1::Foo> for v1alpha1::Foo {
        fn from(__sv_foo: v1::Foo) -> Self {
            Self {
                bar: __sv_foo.bar.into(),
                foo: __sv_foo.foo.into(),
            }
        }
    }
    impl ::std::convert::From<v1alpha1::Bar> for v1::Bar {
        fn from(__sv_bar: v1alpha1::Bar) -> Self {
            Self { baz: __sv_bar.baz.into() }
        }
    }
    impl ::std::convert::From<v1::Bar> for v1alpha1::Bar {
        fn from(__sv_bar: v1::Bar) -> Self {
            Self { baz: __sv_bar.baz.into() }
        }
    }
    pub mod v1 {
        use super::*;
        pub struct Foo {
            pub bar: usize,
            pub baz: bool,
            pub foo: String,
        }
        pub struct Bar {
            pub baz: String,
        }
    }
    #[allow(deprecated)]
    impl ::std::convert::From<v1::Foo> for v2alpha1::Foo {
        fn from(__sv_foo: v1::Foo) -> Self {
            Self {
                bar: __sv_foo.bar.into(),
                baz: __sv_foo.baz.into(),
                deprecated_foo: __sv_foo.foo.into(),
            }
        }
    }
    #[allow(deprecated)]
    impl ::std::convert::From<v2alpha1::Foo> for v1::Foo {
        fn from(__sv_foo: v2alpha1::Foo) -> Self {
            Self {
                bar: __sv_foo.bar.into(),
                baz: __sv_foo.baz.into(),
                foo: __sv_foo.deprecated_foo.into(),
            }
        }
    }
    impl ::std::convert::From<v1::Bar> for v2alpha1::Bar {
        fn from(__sv_bar: v1::Bar) -> Self {
            Self { baz: __sv_bar.baz.into() }
        }
    }
    impl ::std::convert::From<v2alpha1::Bar> for v1::Bar {
        fn from(__sv_bar: v2alpha1::Bar) -> Self {
            Self { baz: __sv_bar.baz.into() }
        }
    }
    pub mod v2alpha1 {
        use super::*;
        pub struct Foo {
            pub bar: usize,
            pub baz: bool,
            #[deprecated]
            pub deprecated_foo: String,
        }
        pub struct Bar {
            pub baz: String,
        }
    }
}

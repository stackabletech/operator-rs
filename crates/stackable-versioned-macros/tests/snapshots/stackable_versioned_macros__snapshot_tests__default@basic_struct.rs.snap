---
source: crates/stackable-versioned-macros/src/lib.rs
expression: formatted
input_file: crates/stackable-versioned-macros/tests/inputs/default/pass/basic_struct.rs
---
#[automatically_derived]
#[deprecated = "Version v1alpha1 is deprecated"]
pub(crate) mod v1alpha1 {
    use super::*;
    pub struct Foo {
        /// Test
        pub jjj: u8,
        pub baz: bool,
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v1alpha1::Foo> for v1beta1::Foo {
    fn from(__sv_foo: v1alpha1::Foo) -> Self {
        Self {
            bar: __sv_foo.jjj.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v1beta1::Foo> for v1alpha1::Foo {
    fn from(__sv_foo: v1beta1::Foo) -> Self {
        Self {
            jjj: __sv_foo.bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
pub(crate) mod v1beta1 {
    use super::*;
    pub struct Foo {
        /// Test
        pub bar: u16,
        pub baz: bool,
    }
}
#[automatically_derived]
impl ::std::convert::From<v1beta1::Foo> for v1::Foo {
    fn from(__sv_foo: v1beta1::Foo) -> Self {
        Self {
            foo: ::std::default::Default::default(),
            bar: __sv_foo.bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
impl ::std::convert::From<v1::Foo> for v1beta1::Foo {
    fn from(__sv_foo: v1::Foo) -> Self {
        Self {
            bar: __sv_foo.bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
pub(crate) mod v1 {
    use super::*;
    pub struct Foo {
        pub foo: String,
        /// Test
        pub bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v1::Foo> for v2::Foo {
    fn from(__sv_foo: v1::Foo) -> Self {
        Self {
            foo: __sv_foo.foo.into(),
            deprecated_bar: __sv_foo.bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v2::Foo> for v1::Foo {
    fn from(__sv_foo: v2::Foo) -> Self {
        Self {
            foo: __sv_foo.foo.into(),
            bar: __sv_foo.deprecated_bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
pub(crate) mod v2 {
    use super::*;
    pub struct Foo {
        pub foo: String,
        /// Test
        #[deprecated = "not empty"]
        pub deprecated_bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v2::Foo> for v3::Foo {
    fn from(__sv_foo: v2::Foo) -> Self {
        Self {
            foo: __sv_foo.foo.into(),
            deprecated_bar: __sv_foo.deprecated_bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
#[allow(deprecated)]
impl ::std::convert::From<v3::Foo> for v2::Foo {
    fn from(__sv_foo: v3::Foo) -> Self {
        Self {
            foo: __sv_foo.foo.into(),
            deprecated_bar: __sv_foo.deprecated_bar.into(),
            baz: __sv_foo.baz.into(),
        }
    }
}
#[automatically_derived]
pub(crate) mod v3 {
    use super::*;
    pub struct Foo {
        pub foo: String,
        /// Test
        #[deprecated]
        pub deprecated_bar: usize,
        pub baz: bool,
    }
}

---
source: crates/stackable-versioned-macros/src/lib.rs
expression: formatted
input_file: crates/stackable-versioned-macros/fixtures/inputs/k8s/renamed_kind.rs
---
#[automatically_derived]
pub mod v1alpha1 {
    use super::*;
    #[derive(
        Clone,
        Debug,
        serde::Deserialize,
        serde::Serialize,
        schemars::JsonSchema,
        kube::CustomResource,
    )]
    #[kube(
        group = "stackable.tech",
        version = "v1alpha1",
        kind = "FooBar",
        singular = "foo",
        plural = "foos",
        namespaced
    )]
    pub struct FooSpec {
        pub baz: bool,
    }
}
#[automatically_derived]
impl ::std::convert::From<v1alpha1::FooSpec> for v1beta1::FooSpec {
    fn from(__sv_foospec: v1alpha1::FooSpec) -> Self {
        Self {
            bah: ::std::default::Default::default(),
            baz: __sv_foospec.baz,
        }
    }
}
#[automatically_derived]
pub mod v1beta1 {
    use super::*;
    #[derive(
        Clone,
        Debug,
        serde::Deserialize,
        serde::Serialize,
        schemars::JsonSchema,
        kube::CustomResource,
    )]
    #[kube(
        group = "stackable.tech",
        version = "v1beta1",
        kind = "FooBar",
        singular = "foo",
        plural = "foos",
        namespaced
    )]
    pub struct FooSpec {
        pub bah: u16,
        pub baz: bool,
    }
}
#[automatically_derived]
impl ::std::convert::From<v1beta1::FooSpec> for v1::FooSpec {
    fn from(__sv_foospec: v1beta1::FooSpec) -> Self {
        Self {
            bar: __sv_foospec.bah.into(),
            baz: __sv_foospec.baz,
        }
    }
}
#[automatically_derived]
pub mod v1 {
    use super::*;
    #[derive(
        Clone,
        Debug,
        serde::Deserialize,
        serde::Serialize,
        schemars::JsonSchema,
        kube::CustomResource,
    )]
    #[kube(
        group = "stackable.tech",
        version = "v1",
        kind = "FooBar",
        singular = "foo",
        plural = "foos",
        namespaced
    )]
    pub struct FooSpec {
        pub bar: usize,
        pub baz: bool,
    }
}
#[automatically_derived]
pub enum FooBar {
    V1Alpha1,
    V1Beta1,
    V1,
}
#[automatically_derived]
impl ::std::fmt::Display for FooBar {
    fn fmt(
        &self,
        f: &mut ::std::fmt::Formatter<'_>,
    ) -> ::std::result::Result<(), ::std::fmt::Error> {
        match self {
            Self::V1Alpha1 => f.write_str("v1alpha1"),
            Self::V1Beta1 => f.write_str("v1beta1"),
            Self::V1 => f.write_str("v1"),
        }
    }
}
#[automatically_derived]
impl FooBar {
    /// Generates a merged CRD which contains all versions defined using the `#[versioned()]` macro.
    pub fn merged_crd(
        stored_apiversion: Self,
    ) -> ::std::result::Result<
        ::k8s_openapi::apiextensions_apiserver::pkg::apis::apiextensions::v1::CustomResourceDefinition,
        ::kube::core::crd::MergeError,
    > {
        ::kube::core::crd::merge_crds(
            vec![
                < v1alpha1::FooBar as ::kube::core::CustomResourceExt > ::crd(), <
                v1beta1::FooBar as ::kube::core::CustomResourceExt > ::crd(), <
                v1::FooBar as ::kube::core::CustomResourceExt > ::crd()
            ],
            &stored_apiversion.to_string(),
        )
    }
    /// Generates and writes a merged CRD which contains all versions defined using the `#[versioned()]`
    /// macro to a file located at `path`.
    pub fn write_merged_crd<P>(
        path: P,
        stored_apiversion: Self,
        operator_version: &str,
    ) -> Result<(), ::stackable_versioned::Error>
    where
        P: AsRef<::std::path::Path>,
    {
        use ::stackable_shared::yaml::{YamlSchema, SerializeOptions};
        let merged_crd = Self::merged_crd(stored_apiversion)
            .map_err(|err| ::stackable_versioned::Error::MergeCrd {
                source: err,
            })?;
        YamlSchema::write_yaml_schema(
                &merged_crd,
                path,
                operator_version,
                SerializeOptions::default(),
            )
            .map_err(|err| ::stackable_versioned::Error::SerializeYaml {
                source: err,
            })
    }
    /// Generates and writes a merged CRD which contains all versions defined using the `#[versioned()]`
    /// macro to stdout.
    pub fn print_merged_crd(
        stored_apiversion: Self,
        operator_version: &str,
    ) -> Result<(), ::stackable_versioned::Error> {
        use ::stackable_shared::yaml::{YamlSchema, SerializeOptions};
        let merged_crd = Self::merged_crd(stored_apiversion)
            .map_err(|err| ::stackable_versioned::Error::MergeCrd {
                source: err,
            })?;
        YamlSchema::print_yaml_schema(
                &merged_crd,
                operator_version,
                SerializeOptions::default(),
            )
            .map_err(|err| ::stackable_versioned::Error::SerializeYaml {
                source: err,
            })
    }
}

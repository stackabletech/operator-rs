---
source: crates/stackable-versioned-macros/src/lib.rs
expression: formatted
input_file: crates/stackable-versioned-macros/fixtures/inputs/default/generics_module.rs
---
#[automatically_derived]
pub mod versioned {
    pub mod v1alpha1 {
        use super::*;
        pub struct Foo<T>
        where
            T: Default,
        {
            pub bar: T,
            pub baz: u8,
        }
        pub enum Boom<T>
        where
            T: Default,
        {
            Big(T),
            Shaq,
        }
    }
    impl<T> ::std::convert::From<v1alpha1::Foo<T>> for v1::Foo<T>
    where
        T: Default,
    {
        fn from(__sv_foo: v1alpha1::Foo<T>) -> Self {
            Self {
                bar: __sv_foo.bar.into(),
                baz: __sv_foo.baz.into(),
            }
        }
    }
    impl<T> ::std::convert::From<v1alpha1::Boom<T>> for v1::Boom<T>
    where
        T: Default,
    {
        fn from(__sv_boom: v1alpha1::Boom<T>) -> Self {
            match __sv_boom {
                v1alpha1::Boom::Big(__sv_0) => v1::Boom::Big(__sv_0),
                v1alpha1::Boom::Shaq => v1::Boom::Shaq,
            }
        }
    }
    pub mod v1 {
        use super::*;
        pub struct Foo<T>
        where
            T: Default,
        {
            pub bar: T,
            pub baz: u8,
        }
        pub enum Boom<T>
        where
            T: Default,
        {
            Big(T),
            Shaq,
        }
    }
}
